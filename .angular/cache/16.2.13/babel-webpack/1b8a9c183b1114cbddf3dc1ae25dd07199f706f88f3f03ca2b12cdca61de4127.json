{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthServiceService {\n  constructor(http) {\n    this.http = http;\n    this.loginUrl = 'http://localhost:8080/api/login'; // Adjust if necessary\n    this.registerUrl = 'http://localhost:8080/api/register'; // Adjust if necessary\n  }\n\n  login(loginData) {\n    return this.http.post(this.loginUrl, loginData, {\n      responseType: 'text'\n    }).pipe(catchError(error => {\n      return throwError(error);\n    }));\n  }\n  register(user) {\n    return this.http.post(this.registerUrl, user, {\n      responseType: 'text'\n    }).pipe(catchError(error => {\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function AuthServiceService_Factory(t) {\n    return new (t || AuthServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthServiceService,\n    factory: AuthServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthServiceService };","map":{"version":3,"names":["catchError","throwError","AuthServiceService","constructor","http","loginUrl","registerUrl","login","loginData","post","responseType","pipe","error","register","user","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Alina\\Desktop\\library\\src\\app\\services\\authService\\auth-service.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { User } from 'src/app/interfaces/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthServiceService {\n\n  private loginUrl = 'http://localhost:8080/api/login';  // Adjust if necessary\n  private registerUrl = 'http://localhost:8080/api/register';  // Adjust if necessary\n\n  constructor(private http: HttpClient) {}\n\n  login(loginData: { username: string, password: string }): Observable<any> {\n    return this.http.post(this.loginUrl, loginData, { responseType: 'text' })\n      .pipe(\n        catchError(error => {\n          return throwError(error);\n        })\n      );\n  }\n\n  register(user: User): Observable<any> {\n    return this.http.post(this.registerUrl, user, { responseType: 'text' })\n      .pipe(\n        catchError(error => {\n          return throwError(error);\n        })\n      );\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAGzD,MAGaC,kBAAkB;EAK7BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,QAAQ,GAAG,iCAAiC,CAAC,CAAE;IAC/C,KAAAC,WAAW,GAAG,oCAAoC,CAAC,CAAE;EAEtB;;EAEvCC,KAAKA,CAACC,SAAiD;IACrD,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,IAAI,CAACJ,QAAQ,EAAEG,SAAS,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC,CACtEC,IAAI,CACHX,UAAU,CAACY,KAAK,IAAG;MACjB,OAAOX,UAAU,CAACW,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACL;EAEAC,QAAQA,CAACC,IAAU;IACjB,OAAO,IAAI,CAACV,IAAI,CAACK,IAAI,CAAC,IAAI,CAACH,WAAW,EAAEQ,IAAI,EAAE;MAAEJ,YAAY,EAAE;IAAM,CAAE,CAAC,CACpEC,IAAI,CACHX,UAAU,CAACY,KAAK,IAAG;MACjB,OAAOX,UAAU,CAACW,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACL;EAAC,QAAAG,CAAA,G;qBAvBUb,kBAAkB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBlB,kBAAkB;IAAAmB,OAAA,EAAlBnB,kBAAkB,CAAAoB,IAAA;IAAAC,UAAA,EAFjB;EAAM;;SAEPrB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}