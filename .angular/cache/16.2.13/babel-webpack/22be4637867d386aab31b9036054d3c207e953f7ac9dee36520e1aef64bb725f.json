{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass BookService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:8080/api/books';\n  }\n  getAllBooks() {\n    return this.http.get(`${this.url}/allBooks`);\n  }\n  createBook(book, imageFile) {\n    const formData = new FormData();\n    // formData.append('book', JSON.stringify(book)); \n    console.log(imageFile);\n    formData.append('imageFile', imageFile, imageFile.name);\n    formData.append('Access-Control-Allow-Origin', '*');\n    const headers = new HttpHeaders().set('content-type', 'application/json').set('Access-Control-Allow-Origin', '*');\n    // const uploadImageData = new FormData();\n    // uploadImageData.append('imageFile', this.selectedFile, this.selectedFile.name);\n    // //Make a call to the Spring Boot Application to save the image\n    // this.httpClient.post('http://localhost:8080/image/upload', uploadImageData, { observe: 'response' })\n    //   .subscribe((response) => {\n    //     if (response.status === 200) {\n    //       this.message = 'Image uploaded successfully';\n    //     } else {\n    //       this.message = 'Image not uploaded successfully';\n    //     }\n    //   }\n    //   );\n    return this.http.post(this.url, formData, {\n      headers: headers\n    });\n  }\n  static #_ = this.ɵfac = function BookService_Factory(t) {\n    return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookService,\n    factory: BookService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { BookService };","map":{"version":3,"names":["HttpHeaders","BookService","constructor","http","url","getAllBooks","get","createBook","book","imageFile","formData","FormData","console","log","append","name","headers","set","post","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Alina\\Desktop\\library\\src\\app\\services\\book\\book.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Book } from 'src/app/interfaces/book';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n\n  \n\n  private url = 'http://localhost:8080/api/books';\n\n  constructor(private http: HttpClient) { }\n\n  \n  \n  getAllBooks(): Observable<Book[]> {\n    return this.http.get<Book[]>(`${this.url}/allBooks`);\n  }\n  createBook(book: Book, imageFile: File): Observable<Book> {\n    const formData = new FormData();\n    // formData.append('book', JSON.stringify(book)); \n    console.log(imageFile);\n    formData.append('imageFile', imageFile, imageFile.name);\n    formData.append('Access-Control-Allow-Origin', '*'); \n\n    const headers= new HttpHeaders()\n    .set('content-type', 'application/json')\n    .set('Access-Control-Allow-Origin', '*');\n\n    // const uploadImageData = new FormData();\n    // uploadImageData.append('imageFile', this.selectedFile, this.selectedFile.name);\n  \n    // //Make a call to the Spring Boot Application to save the image\n    // this.httpClient.post('http://localhost:8080/image/upload', uploadImageData, { observe: 'response' })\n    //   .subscribe((response) => {\n    //     if (response.status === 200) {\n    //       this.message = 'Image uploaded successfully';\n    //     } else {\n    //       this.message = 'Image not uploaded successfully';\n    //     }\n    //   }\n    //   );\n\n    return this.http.post<Book>(this.url, formData, { headers: headers });\n  }\n\n  \n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAK9D,MAGaC,WAAW;EAMtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,GAAG,GAAG,iCAAiC;EAEP;EAIxCC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,GAAG,IAAI,CAACF,GAAG,WAAW,CAAC;EACtD;EACAG,UAAUA,CAACC,IAAU,EAAEC,SAAe;IACpC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B;IACAC,OAAO,CAACC,GAAG,CAACJ,SAAS,CAAC;IACtBC,QAAQ,CAACI,MAAM,CAAC,WAAW,EAAEL,SAAS,EAAEA,SAAS,CAACM,IAAI,CAAC;IACvDL,QAAQ,CAACI,MAAM,CAAC,6BAA6B,EAAE,GAAG,CAAC;IAEnD,MAAME,OAAO,GAAE,IAAIhB,WAAW,EAAE,CAC/BiB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CACvCA,GAAG,CAAC,6BAA6B,EAAE,GAAG,CAAC;IAExC;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAO,IAAI,CAACd,GAAG,EAAEM,QAAQ,EAAE;MAAEM,OAAO,EAAEA;IAAO,CAAE,CAAC;EACvE;EAAC,QAAAG,CAAA,G;qBAvCUlB,WAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXvB,WAAW;IAAAwB,OAAA,EAAXxB,WAAW,CAAAyB,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEP1B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}