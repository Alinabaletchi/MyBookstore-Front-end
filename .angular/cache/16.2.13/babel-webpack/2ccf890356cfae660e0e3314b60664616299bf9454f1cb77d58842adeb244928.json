{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet LoginService = class LoginService {\n  constructor(httpReq, router) {\n    this.httpReq = httpReq;\n    this.router = router;\n    this.loginUrl = 'http://localhost:8080/api/auth/login';\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).subscribe(response => {\n      localStorage.setItem('token', response.token);\n      const decodedToken = this.decodeToken(response.token);\n      localStorage.setItem('roles', JSON.stringify(decodedToken.roles));\n      this.router.navigate(['/']);\n    }, error => {\n      console.error('Login failed', error);\n    });\n  }\n  decodeToken(token) {\n    const payload = atob(token.split('.')[1]);\n    return JSON.parse(payload);\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('roles');\n    this.router.navigate(['/login']);\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n  hasRole(role) {\n    const roles = JSON.parse(localStorage.getItem('roles') || '[]');\n    return roles.includes(role);\n  }\n};\nLoginService = __decorate([Injectable({\n  providedIn: 'root'\n})], LoginService);\nexport { LoginService };","map":{"version":3,"names":["Injectable","LoginService","constructor","httpReq","router","loginUrl","login","credentials","http","post","apiUrl","subscribe","response","localStorage","setItem","token","decodedToken","decodeToken","JSON","stringify","roles","navigate","error","console","payload","atob","split","parse","logout","removeItem","isAuthenticated","getItem","hasRole","role","includes","__decorate","providedIn"],"sources":["C:\\Users\\Alina\\Desktop\\library\\src\\app\\services\\login\\login.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, map, throwError } from 'rxjs';\nimport { LoginData } from 'src/app/interfaces/login';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  private loginUrl = 'http://localhost:8080/api/auth/login';\n\n  \n  constructor(private httpReq:HttpClient, private router:Ro) {\n  }\n  login(credentials: { username: string; password: string; }) {\n    return this.http.post<{ token: string }>(`${this.apiUrl}/login`, credentials).subscribe(\n      response => {\n        localStorage.setItem('token', response.token);\n        const decodedToken = this.decodeToken(response.token);\n        localStorage.setItem('roles', JSON.stringify(decodedToken.roles));\n        this.router.navigate(['/']);\n      },\n      error => {\n        console.error('Login failed', error);\n      }\n    );\n  }\n\n  decodeToken(token: string): any {\n    const payload = atob(token.split('.')[1]);\n    return JSON.parse(payload);\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('roles');\n    this.router.navigate(['/login']);\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  hasRole(role: string): boolean {\n    const roles = JSON.parse(localStorage.getItem('roles') || '[]');\n    return roles.includes(role);\n  }\n\n\n  // login(email: string, password: string): Observable<any> {\n  //   const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n  //   const body = JSON.stringify({ email, password });\n\n  //   return this.httpReq.post(this.loginUrl, body, { headers }).pipe(\n  //     map((response: any) => {\n  //       // Stochează token-ul JWT în local storage\n  //       localStorage.setItem('token', response.token);\n  //       return response;\n  //     })\n  //   );\n  // }\n\n  // logout(): void {\n  //   // Șterge token-ul din local storage la logout\n  //   localStorage.removeItem('token');\n  // }\n\n  // // Metodă pentru a obține token-ul\n  // getToken(): string | null {\n  //   return localStorage.getItem('token');\n  // }\n\n  // // Metodă pentru a verifica dacă utilizatorul este autentificat\n  // isAuthenticated(): boolean {\n  //   return !!this.getToken();\n  // }\n\n\n \n}\n"],"mappings":";AACA,SAASA,UAAU,QAAQ,eAAe;AAO1C,IAAaC,YAAY,GAAzB,MAAaA,YAAY;EAKvBC,YAAoBC,OAAkB,EAAUC,MAAS;IAArC,KAAAD,OAAO,GAAPA,OAAO;IAAqB,KAAAC,MAAM,GAANA,MAAM;IAH9C,KAAAC,QAAQ,GAAG,sCAAsC;EAIzD;EACAC,KAAKA,CAACC,WAAoD;IACxD,OAAO,IAAI,CAACC,IAAI,CAACC,IAAI,CAAoB,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEH,WAAW,CAAC,CAACI,SAAS,CACrFC,QAAQ,IAAG;MACTC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACG,KAAK,CAAC;MAC7C,MAAMC,YAAY,GAAG,IAAI,CAACC,WAAW,CAACL,QAAQ,CAACG,KAAK,CAAC;MACrDF,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEI,IAAI,CAACC,SAAS,CAACH,YAAY,CAACI,KAAK,CAAC,CAAC;MACjE,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,EACDC,KAAK,IAAG;MACNC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACtC,CAAC,CACF;EACH;EAEAL,WAAWA,CAACF,KAAa;IACvB,MAAMS,OAAO,GAAGC,IAAI,CAACV,KAAK,CAACW,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACzC,OAAOR,IAAI,CAACS,KAAK,CAACH,OAAO,CAAC;EAC5B;EAEAI,MAAMA,CAAA;IACJf,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;IAChChB,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACzB,MAAM,CAACiB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAS,eAAeA,CAAA;IACb,OAAO,CAAC,CAACjB,YAAY,CAACkB,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAC,OAAOA,CAACC,IAAY;IAClB,MAAMb,KAAK,GAAGF,IAAI,CAACS,KAAK,CAACd,YAAY,CAACkB,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;IAC/D,OAAOX,KAAK,CAACc,QAAQ,CAACD,IAAI,CAAC;EAC7B;CAiCD;AAxEYhC,YAAY,GAAAkC,UAAA,EAHxBnC,UAAU,CAAC;EACVoC,UAAU,EAAE;CACb,CAAC,C,EACWnC,YAAY,CAwExB;SAxEYA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}