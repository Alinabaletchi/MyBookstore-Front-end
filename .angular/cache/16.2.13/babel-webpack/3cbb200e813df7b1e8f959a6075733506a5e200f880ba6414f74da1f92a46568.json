{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass LoginService {\n  constructor(httpReq) {\n    this.httpReq = httpReq;\n    this.loginUrl = 'http://localhost:8080/api/auth/login';\n  }\n  static #_ = this.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { LoginService };","map":{"version":3,"names":["LoginService","constructor","httpReq","loginUrl","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Alina\\Desktop\\library\\src\\app\\services\\login\\login.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, map, throwError } from 'rxjs';\nimport { LoginData } from 'src/app/interfaces/login';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  private loginUrl = 'http://localhost:8080/api/auth/login';\n\n  \n  constructor(private httpReq:HttpClient) {\n  }\n\n\n  // login(email: string, password: string): Observable<any> {\n  //   const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n  //   const body = JSON.stringify({ email, password });\n\n  //   return this.httpReq.post(this.loginUrl, body, { headers }).pipe(\n  //     map((response: any) => {\n  //       // Stochează token-ul JWT în local storage\n  //       localStorage.setItem('token', response.token);\n  //       return response;\n  //     })\n  //   );\n  // }\n\n  // logout(): void {\n  //   // Șterge token-ul din local storage la logout\n  //   localStorage.removeItem('token');\n  // }\n\n  // // Metodă pentru a obține token-ul\n  // getToken(): string | null {\n  //   return localStorage.getItem('token');\n  // }\n\n  // // Metodă pentru a verifica dacă utilizatorul este autentificat\n  // isAuthenticated(): boolean {\n  //   return !!this.getToken();\n  // }\n\n\n \n}\n"],"mappings":";;AAKA,MAGaA,YAAY;EAKvBC,YAAoBC,OAAkB;IAAlB,KAAAA,OAAO,GAAPA,OAAO;IAHnB,KAAAC,QAAQ,GAAG,sCAAsC;EAIzD;EAAC,QAAAC,CAAA,G;qBANUJ,YAAY,EAAAK,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZT,YAAY;IAAAU,OAAA,EAAZV,YAAY,CAAAW,IAAA;IAAAC,UAAA,EAFX;EAAM;;SAEPZ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}