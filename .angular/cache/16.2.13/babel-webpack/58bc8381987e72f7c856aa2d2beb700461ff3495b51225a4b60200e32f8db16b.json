{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass LoginService {\n  constructor(httpReq) {\n    this.httpReq = httpReq;\n    this.loginUrl = 'http://localhost:8080/api/login';\n  }\n  // login(email: string, password: string): Observable<any> {\n  //   const loginData = { email: email, password: password };\n  //   return this.httpReq.post<any>(this.loginUrl, loginData, { observe: 'response' });\n  // }\n  login(email, password) {\n    const loginData = {\n      email: email,\n      password: password\n    };\n    return this.http.post(this.loginUrl, loginData, {\n      observe: 'response'\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage;\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${error.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      errorMessage = `Backend returned code ${error.status}, body was: ${error.error}`;\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(errorMessage);\n  }\n  static #_ = this.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { LoginService };","map":{"version":3,"names":["LoginService","constructor","httpReq","loginUrl","login","email","password","loginData","http","post","observe","pipe","catchError","handleError","error","errorMessage","ErrorEvent","message","status","throwError","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Alina\\Desktop\\library\\src\\app\\services\\login\\login.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { LoginData } from 'src/app/interfaces/login';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  private loginUrl = 'http://localhost:8080/api/login';\n\n  \n  constructor(private httpReq:HttpClient) {\n  }\n  // login(email: string, password: string): Observable<any> {\n  //   const loginData = { email: email, password: password };\n  //   return this.httpReq.post<any>(this.loginUrl, loginData, { observe: 'response' });\n  // }\n\n  login(email: string, password: string): Observable<any> {\n    const loginData = { email: email, password: password };\n    return this.http.post<HttpResponse<any>>(this.loginUrl, loginData, { observe: 'response' })\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: any): Observable<any> {\n    let errorMessage: string;\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${error.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      errorMessage = `Backend returned code ${error.status}, body was: ${error.error}`;\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(errorMessage);\n  }\n \n}\n"],"mappings":";;AAKA,MAGaA,YAAY;EAKvBC,YAAoBC,OAAkB;IAAlB,KAAAA,OAAO,GAAPA,OAAO;IAHnB,KAAAC,QAAQ,GAAG,iCAAiC;EAIpD;EACA;EACA;EACA;EACA;EAEAC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAMC,SAAS,GAAG;MAAEF,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAE;IACtD,OAAO,IAAI,CAACE,IAAI,CAACC,IAAI,CAAoB,IAAI,CAACN,QAAQ,EAAEI,SAAS,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC,CACxFC,IAAI,CACHC,UAAU,CAAC,IAAI,CAACC,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAWA,CAACC,KAAU;IAC5B,IAAIC,YAAoB;IACxB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,sBAAsBD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC3D,MAAM;MACL;MACA;MACAF,YAAY,GAAG,yBAAyBD,KAAK,CAACI,MAAM,eAAeJ,KAAK,CAACA,KAAK,EAAE;;IAElF;IACA,OAAOK,UAAU,CAACJ,YAAY,CAAC;EACjC;EAAC,QAAAK,CAAA,G;qBAhCUpB,YAAY,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZzB,YAAY;IAAA0B,OAAA,EAAZ1B,YAAY,CAAA2B,IAAA;IAAAC,UAAA,EAFX;EAAM;;SAEP5B,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}