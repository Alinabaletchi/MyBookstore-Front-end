{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(http, formBuilder, loginService) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.loginService = loginService;\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    if (this.loginForm.valid) {}\n    const email = this.loginForm.get('email')?.value;\n    const password = this.loginForm.get('password')?.value;\n    this.http.post('https://example.demo.com/controller/login', {\n      email,\n      password\n    }).subscribe(response => {\n      // Gestionați răspunsul de la server\n      console.log('Răspuns de la server:', response);\n    }, error => {\n      // Gestionați erorile\n      console.error('Eroare:', error);\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","Validators","LoginComponent","constructor","http","formBuilder","loginService","loginForm","group","username","required","password","onSubmit","valid","email","get","value","post","subscribe","response","console","log","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Alina\\Desktop\\library\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { LoginData } from 'src/app/interfaces/login';\nimport { LoginService } from 'src/app/services/login/login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder, private loginService: LoginService) {\n    \n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n    \n  onSubmit():void {\n    if (this.loginForm.valid) {}\n        const email = this.loginForm.get('email')?.value;\n        const password = this.loginForm.get('password')?.value; \n  \n        this.http.post<any>('https://example.demo.com/controller/login', { email, password })\n        .subscribe(\n          response => {\n            // Gestionați răspunsul de la server\n            console.log('Răspuns de la server:', response);\n          },\n          error => {\n            // Gestionați erorile\n            console.error('Eroare:', error);\n          }\n        );\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AASnE,IAAaC,cAAc,GAA3B,MAAaA,cAAc;EAIzBC,YAAoBC,IAAgB,EAAUC,WAAwB,EAAUC,YAA0B;IAAtF,KAAAF,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IAAuB,KAAAC,YAAY,GAAZA,YAAY;IAE1F,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAER,UAAU,CAACS,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACS,QAAQ;KACnC,CAAC;EACJ;EAGAE,QAAQA,CAAA;IACN,IAAI,IAAI,CAACL,SAAS,CAACM,KAAK,EAAE;IACtB,MAAMC,KAAK,GAAG,IAAI,CAACP,SAAS,CAACQ,GAAG,CAAC,OAAO,CAAC,EAAEC,KAAK;IAChD,MAAML,QAAQ,GAAG,IAAI,CAACJ,SAAS,CAACQ,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;IAEtD,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAM,2CAA2C,EAAE;MAAEH,KAAK;MAAEH;IAAQ,CAAE,CAAC,CACpFO,SAAS,CACRC,QAAQ,IAAG;MACT;MACAC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,QAAQ,CAAC;IAChD,CAAC,EACDG,KAAK,IAAG;MACN;MACAF,OAAO,CAACE,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACjC,CAAC,CACF;EACP;CAED;AA/BYpB,cAAc,GAAAqB,UAAA,EAL1BvB,SAAS,CAAC;EACTwB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWxB,cAAc,CA+B1B;SA/BYA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}