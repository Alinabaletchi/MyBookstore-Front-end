{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/services/login/login.service\";\nclass LoginComponent {\n  constructor(http, formBuilder, loginService) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.loginService = loginService;\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    if (this.loginForm.valid) {}\n    const email = this.loginForm.get('email')?.value;\n    const password = this.loginForm.get('password')?.value;\n    this.http.post('https://example.demo.com/controller/login', {\n      email,\n      password\n    }).subscribe(response => {\n      // Gestionați răspunsul de la server\n      console.log('Răspuns de la server:', response);\n    }, error => {\n      // Gestionați erorile\n      console.error('Eroare:', error);\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.LoginService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 19,\n    vars: 0,\n    consts: [[1, \"form-group\"], [\"for\", \"exampleInputEmail1\"], [\"type\", \"email\", \"id\", \"exampleInputEmail1\", \"aria-describedby\", \"emailHelp\", \"placeholder\", \"Please enter your email!\", 1, \"form-control\"], [\"id\", \"emailHelp\", 1, \"form-text\", \"text-muted\"], [\"for\", \"exampleInputPassword1\"], [\"type\", \"password\", \"id\", \"exampleInputPassword1\", \"placeholder\", \" Password\", 1, \"form-control\"], [1, \"form-group\", \"form-check\"], [\"type\", \"checkbox\", \"id\", \"exampleCheck1\", 1, \"form-check-input\"], [\"for\", \"exampleCheck1\", 1, \"form-check-label\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"login works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\")(3, \"div\", 0)(4, \"label\", 1);\n        i0.ɵɵtext(5, \"Email address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 2);\n        i0.ɵɵelementStart(7, \"small\", 3);\n        i0.ɵɵtext(8, \"We'll never share your email with anyone else.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\", 0)(10, \"label\", 4);\n        i0.ɵɵtext(11, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 6);\n        i0.ɵɵelement(14, \"input\", 7);\n        i0.ɵɵelementStart(15, \"label\", 8);\n        i0.ɵɵtext(16, \"Check me out\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(17, \"button\", 9);\n        i0.ɵɵtext(18, \"Login\");\n        i0.ɵɵelementEnd()();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}\nexport { LoginComponent };","map":{"version":3,"names":["Validators","LoginComponent","constructor","http","formBuilder","loginService","loginForm","group","username","required","password","onSubmit","valid","email","get","value","post","subscribe","response","console","log","error","_","i0","ɵɵdirectiveInject","i1","HttpClient","i2","FormBuilder","i3","LoginService","_2","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement"],"sources":["C:\\Users\\Alina\\Desktop\\library\\src\\app\\components\\login\\login.component.ts","C:\\Users\\Alina\\Desktop\\library\\src\\app\\components\\login\\login.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { LoginData } from 'src/app/interfaces/login';\nimport { LoginService } from 'src/app/services/login/login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder, private loginService: LoginService) {\n    \n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n    \n  onSubmit():void {\n    if (this.loginForm.valid) {}\n        const email = this.loginForm.get('email')?.value;\n        const password = this.loginForm.get('password')?.value; \n  \n        this.http.post<any>('https://example.demo.com/controller/login', { email, password })\n        .subscribe(\n          response => {\n            // Gestionați răspunsul de la server\n            console.log('Răspuns de la server:', response);\n          },\n          error => {\n            // Gestionați erorile\n            console.error('Eroare:', error);\n          }\n        );\n  }\n\n}\n","<p>login works!</p>\n<form>\n    <div class=\"form-group\">\n      <label for=\"exampleInputEmail1\">Email address</label>\n      <input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Please enter your email!\">\n      <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"exampleInputPassword1\">Password</label>\n      <input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\" Password\">\n    </div>\n    <div class=\"form-group form-check\">\n      <input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck1\">\n      <label class=\"form-check-label\" for=\"exampleCheck1\">Check me out</label>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Login</button>\n  </form>"],"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;AAInE,MAKaC,cAAc;EAIzBC,YAAoBC,IAAgB,EAAUC,WAAwB,EAAUC,YAA0B;IAAtF,KAAAF,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IAAuB,KAAAC,YAAY,GAAZA,YAAY;IAE1F,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAER,UAAU,CAACS,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACS,QAAQ;KACnC,CAAC;EACJ;EAGAE,QAAQA,CAAA;IACN,IAAI,IAAI,CAACL,SAAS,CAACM,KAAK,EAAE;IACtB,MAAMC,KAAK,GAAG,IAAI,CAACP,SAAS,CAACQ,GAAG,CAAC,OAAO,CAAC,EAAEC,KAAK;IAChD,MAAML,QAAQ,GAAG,IAAI,CAACJ,SAAS,CAACQ,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;IAEtD,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAM,2CAA2C,EAAE;MAAEH,KAAK;MAAEH;IAAQ,CAAE,CAAC,CACpFO,SAAS,CACRC,QAAQ,IAAG;MACT;MACAC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,QAAQ,CAAC;IAChD,CAAC,EACDG,KAAK,IAAG;MACN;MACAF,OAAO,CAACE,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACjC,CAAC,CACF;EACP;EAAC,QAAAC,CAAA,G;qBA7BUrB,cAAc,EAAAsB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAd9B,cAAc;IAAA+B,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCX3Bf,EAAA,CAAAiB,cAAA,QAAG;QAAAjB,EAAA,CAAAkB,MAAA,mBAAY;QAAAlB,EAAA,CAAAmB,YAAA,EAAI;QACnBnB,EAAA,CAAAiB,cAAA,WAAM;QAEgCjB,EAAA,CAAAkB,MAAA,oBAAa;QAAAlB,EAAA,CAAAmB,YAAA,EAAQ;QACrDnB,EAAA,CAAAoB,SAAA,eAAqI;QACrIpB,EAAA,CAAAiB,cAAA,eAAmD;QAAAjB,EAAA,CAAAkB,MAAA,qDAA8C;QAAAlB,EAAA,CAAAmB,YAAA,EAAQ;QAE3GnB,EAAA,CAAAiB,cAAA,aAAwB;QACajB,EAAA,CAAAkB,MAAA,gBAAQ;QAAAlB,EAAA,CAAAmB,YAAA,EAAQ;QACnDnB,EAAA,CAAAoB,SAAA,gBAA+F;QACjGpB,EAAA,CAAAmB,YAAA,EAAM;QACNnB,EAAA,CAAAiB,cAAA,cAAmC;QACjCjB,EAAA,CAAAoB,SAAA,gBAAmE;QACnEpB,EAAA,CAAAiB,cAAA,gBAAoD;QAAAjB,EAAA,CAAAkB,MAAA,oBAAY;QAAAlB,EAAA,CAAAmB,YAAA,EAAQ;QAE1EnB,EAAA,CAAAiB,cAAA,iBAA8C;QAAAjB,EAAA,CAAAkB,MAAA,aAAK;QAAAlB,EAAA,CAAAmB,YAAA,EAAS;;;;;;SDJnDzC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}