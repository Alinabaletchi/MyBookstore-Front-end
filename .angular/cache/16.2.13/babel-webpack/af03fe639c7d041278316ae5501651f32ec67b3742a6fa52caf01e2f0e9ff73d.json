{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet LoginComponent = class LoginComponent {\n  constructor(loginService, router) {\n    this.loginService = loginService;\n    this.router = router;\n    this.user = {\n      email: '',\n      password: ''\n    }; // Define a user object for validation\n  }\n\n  login() {\n    this.loginService.login(this.user.email, this.user.password).subscribe({\n      next: response => {\n        if (response.status === 200) {\n          console.log('Login successful');\n          this.router.navigate(['/home']); // Adjust as needed for your routing setup\n        } else {\n          console.error('Login failed');\n        }\n      },\n      error: error => {\n        console.error('Login failed', error);\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };\n//   loginForm: FormGroup;\n//   user: LoginData = {\n//     email: '',\n//     password: ''\n//   };\n//   errorMessage: string = '';\n//   constructor(private formBuilder: FormBuilder, private loginService: LoginService, private router: Router) {\n//     this.loginForm = this.formBuilder.group({\n//       email: ['', [Validators.required, Validators.email]],\n//       password: ['', Validators.required]\n//     });\n//   }\n//   login(): void {\n//     if (this.loginForm.valid) {\n//       const email = this.loginForm.get('email')?.value;\n//       const password = this.loginForm.get('password')?.value;\n//       this.loginService.login({ email, password }).subscribe(\n//         response => {\n//           console.log('Autentificare reușită:', response);\n//           this.router.navigate(['/home']);\n//         },\n//         error => {\n//           console.error('Eroare de autentificare:', error);\n//           this.errorMessage = 'Eroare de autentificare: ' + error.message; \n//         }\n//       );\n//     }\n//   }\n// }","map":{"version":3,"names":["Component","LoginComponent","constructor","loginService","router","user","email","password","login","subscribe","next","response","status","console","log","navigate","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Alina\\Desktop\\library\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Route, Router } from '@angular/router';\nimport { LoginData } from 'src/app/interfaces/login';\nimport { LoginService } from 'src/app/services/login/login.service';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent {\n\n  user: LoginData = { email: '', password: '' }; // Define a user object for validation\n\n  constructor(private loginService: LoginService, private router: Route) { }\n\n \n  login() {\n    this.loginService.login(this.user.email, this.user.password).subscribe({\n      next: (response) => {\n        if (response.status === 200) {\n          console.log('Login successful');\n          this.router.navigate(['/home']); // Adjust as needed for your routing setup\n        } else {\n          console.error('Login failed');\n        }\n      },\n      error: (error) => {\n        console.error('Login failed', error);\n      }\n    });\n  }\n}\n\n//   loginForm: FormGroup;\n\n//   user: LoginData = {\n//     email: '',\n//     password: ''\n//   };\n\n//   errorMessage: string = '';\n\n//   constructor(private formBuilder: FormBuilder, private loginService: LoginService, private router: Router) {\n//     this.loginForm = this.formBuilder.group({\n//       email: ['', [Validators.required, Validators.email]],\n//       password: ['', Validators.required]\n//     });\n//   }\n\n//   login(): void {\n//     if (this.loginForm.valid) {\n//       const email = this.loginForm.get('email')?.value;\n//       const password = this.loginForm.get('password')?.value;\n\n//       this.loginService.login({ email, password }).subscribe(\n//         response => {\n          \n//           console.log('Autentificare reușită:', response);\n//           this.router.navigate(['/home']);\n          \n//         },\n//         error => {\n          \n//           console.error('Eroare de autentificare:', error);\n//           this.errorMessage = 'Eroare de autentificare: ' + error.message; \n//         }\n//       );\n//     }\n//   }\n// }"],"mappings":";AACA,SAASA,SAAS,QAAQ,eAAe;AAYzC,IAAaC,cAAc,GAA3B,MAAaA,cAAc;EAIzBC,YAAoBC,YAA0B,EAAUC,MAAa;IAAjD,KAAAD,YAAY,GAAZA,YAAY;IAAwB,KAAAC,MAAM,GAANA,MAAM;IAF9D,KAAAC,IAAI,GAAc;MAAEC,KAAK,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAE,CAAE,CAAC,CAAC;EAE0B;;EAGzEC,KAAKA,CAAA;IACH,IAAI,CAACL,YAAY,CAACK,KAAK,CAAC,IAAI,CAACH,IAAI,CAACC,KAAK,EAAE,IAAI,CAACD,IAAI,CAACE,QAAQ,CAAC,CAACE,SAAS,CAAC;MACrEC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;UAC3BC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;UAC/B,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SAClC,MAAM;UACLF,OAAO,CAACG,KAAK,CAAC,cAAc,CAAC;;MAEjC,CAAC;MACDA,KAAK,EAAGA,KAAK,IAAI;QACfH,OAAO,CAACG,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC;KACD,CAAC;EACJ;CACD;AAtBYf,cAAc,GAAAgB,UAAA,EAL1BjB,SAAS,CAAC;EACTkB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWnB,cAAc,CAsB1B;SAtBYA,cAAc;AAwB3B;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}