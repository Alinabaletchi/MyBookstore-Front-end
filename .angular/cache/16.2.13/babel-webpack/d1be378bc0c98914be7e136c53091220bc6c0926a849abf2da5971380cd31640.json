{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/login/login.service\";\nclass LoginComponent {\n  constructor(formBuilder, loginService) {\n    this.formBuilder = formBuilder;\n    this.loginService = loginService;\n    this.user = {\n      email: '',\n      password: ''\n    };\n    this.errorMessage = '';\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n  login() {\n    if (this.loginForm.valid) {\n      const email = this.loginForm.get('email')?.value;\n      const password = this.loginForm.get('password')?.value;\n      this.loginService.login({\n        email,\n        password\n      }).subscribe(response => {\n        // Autentificare reușită, puteți gestiona răspunsul serverului aici (de exemplu, redirecționare către o altă pagină)\n        console.log('Autentificare reușită:', response);\n        // Redirecționare către pagina principală sau altă pagină\n      }, error => {\n        // Autentificare eșuată, gestionați eroarea aici (de exemplu, afișați un mesaj de eroare)\n        console.error('Eroare de autentificare:', error);\n        this.errorMessage = 'Eroare de autentificare: ' + error.message; // Afișare mesaj de eroare\n      });\n    }\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.LoginService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 0,\n    vars: 0,\n    template: function LoginComponent_Template(rf, ctx) {},\n    styles: [\".container[_ngcontent-%COMP%] {\\n  background: -webkit-linear-gradient(left, cadetblue, #00c6ff);\\n  margin-top: 3%;\\n  padding: 3%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLDZEQUFBO0VBQ0EsY0FBQTtFQUNBLFdBQUE7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXJ7XHJcbiAgICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudChsZWZ0LGNhZGV0Ymx1ZSAsICMwMGM2ZmYpO1xyXG4gICAgbWFyZ2luLXRvcDogMyU7XHJcbiAgICBwYWRkaW5nOiAzJTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}\nexport { LoginComponent };","map":{"version":3,"names":["Validators","LoginComponent","constructor","formBuilder","loginService","user","email","password","errorMessage","loginForm","group","required","login","valid","get","value","subscribe","response","console","log","error","message","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","LoginService","_2","selectors","decls","vars","template","LoginComponent_Template","rf","ctx","styles"],"sources":["C:\\Users\\Alina\\Desktop\\library\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { LoginData } from 'src/app/interfaces/login';\nimport { LoginService } from 'src/app/services/login/login.service';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n\n  user: LoginData = {\n    email: '',\n    password: ''\n  };\n\n  errorMessage: string = '';\n\n  constructor(private formBuilder: FormBuilder, private loginService: LoginService) {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n\n  login(): void {\n    if (this.loginForm.valid) {\n      const email = this.loginForm.get('email')?.value;\n      const password = this.loginForm.get('password')?.value;\n\n      this.loginService.login({ email, password }).subscribe(\n        response => {\n          // Autentificare reușită, puteți gestiona răspunsul serverului aici (de exemplu, redirecționare către o altă pagină)\n          console.log('Autentificare reușită:', response);\n          // Redirecționare către pagina principală sau altă pagină\n        },\n        error => {\n          // Autentificare eșuată, gestionați eroarea aici (de exemplu, afișați un mesaj de eroare)\n          console.error('Eroare de autentificare:', error);\n          this.errorMessage = 'Eroare de autentificare: ' + error.message; // Afișare mesaj de eroare\n        }\n      );\n    }\n  }\n}"],"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;AAKnE,MAKaC,cAAc;EAUzBC,YAAoBC,WAAwB,EAAUC,YAA0B;IAA5D,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,YAAY,GAAZA,YAAY;IAPlE,KAAAC,IAAI,GAAc;MAChBC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;KACX;IAED,KAAAC,YAAY,GAAW,EAAE;IAGvB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC;MACtCJ,KAAK,EAAE,CAAC,EAAE,EAAE,CAACN,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACM,KAAK,CAAC,CAAC;MACpDC,QAAQ,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACW,QAAQ;KACnC,CAAC;EACJ;EAEAC,KAAKA,CAAA;IACH,IAAI,IAAI,CAACH,SAAS,CAACI,KAAK,EAAE;MACxB,MAAMP,KAAK,GAAG,IAAI,CAACG,SAAS,CAACK,GAAG,CAAC,OAAO,CAAC,EAAEC,KAAK;MAChD,MAAMR,QAAQ,GAAG,IAAI,CAACE,SAAS,CAACK,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;MAEtD,IAAI,CAACX,YAAY,CAACQ,KAAK,CAAC;QAAEN,KAAK;QAAEC;MAAQ,CAAE,CAAC,CAACS,SAAS,CACpDC,QAAQ,IAAG;QACT;QACAC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,QAAQ,CAAC;QAC/C;MACF,CAAC,EACDG,KAAK,IAAG;QACN;QACAF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,IAAI,CAACZ,YAAY,GAAG,2BAA2B,GAAGY,KAAK,CAACC,OAAO,CAAC,CAAC;MACnE,CAAC,CACF;;EAEL;EAAC,QAAAC,CAAA,G;qBAnCUrB,cAAc,EAAAsB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAd5B,cAAc;IAAA6B,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;IAAAC,MAAA;EAAA;;SAAdpC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}