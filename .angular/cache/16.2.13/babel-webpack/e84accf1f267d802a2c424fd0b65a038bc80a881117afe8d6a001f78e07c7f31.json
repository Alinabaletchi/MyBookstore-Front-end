{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass LoginService {\n  constructor(httpReq) {\n    this.httpReq = httpReq;\n    this.loginUrl = 'http://localhost:8080/api/auth/login';\n  }\n  login(email, password) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const body = JSON.stringify({\n      email,\n      password\n    });\n    return this.httpReq.post(this.loginUrl, body, {\n      headers\n    }).pipe(map(response => {\n      localStorage.setItem('token', response.token);\n      return response;\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  static #_ = this.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { LoginService };","map":{"version":3,"names":["HttpHeaders","map","LoginService","constructor","httpReq","loginUrl","login","email","password","headers","body","JSON","stringify","post","pipe","response","localStorage","setItem","token","logout","removeItem","getToken","getItem","isAuthenticated","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Alina\\Desktop\\library\\src\\app\\services\\login\\login.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, map, throwError } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  private loginUrl = 'http://localhost:8080/api/auth/login';\n\n  \n  constructor(private httpReq:HttpClient) {\n  }\n\n  \n  login(email: string, password: string): Observable<any> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    const body = JSON.stringify({ email, password });\n\n    return this.httpReq.post(this.loginUrl, body, { headers }).pipe(\n      map((response: any) => {\n        localStorage.setItem('token', response.token);\n        return response;\n      })\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n  }\n\n  \n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n \n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n\n \n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAsB,sBAAsB;AAE5E,SAAiCC,GAAG,QAAoB,MAAM;;;AAG9D,MAGaC,YAAY;EAKvBC,YAAoBC,OAAkB;IAAlB,KAAAA,OAAO,GAAPA,OAAO;IAHnB,KAAAC,QAAQ,GAAG,sCAAsC;EAIzD;EAGAC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAMC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IACvE,MAAMU,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;MAAEL,KAAK;MAAEC;IAAQ,CAAE,CAAC;IAEhD,OAAO,IAAI,CAACJ,OAAO,CAACS,IAAI,CAAC,IAAI,CAACR,QAAQ,EAAEK,IAAI,EAAE;MAAED;IAAO,CAAE,CAAC,CAACK,IAAI,CAC7Db,GAAG,CAAEc,QAAa,IAAI;MACpBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACG,KAAK,CAAC;MAC7C,OAAOH,QAAQ;IACjB,CAAC,CAAC,CACH;EACH;EAEAI,MAAMA,CAAA;IACJH,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC;EAClC;EAGAC,QAAQA,CAAA;IACN,OAAOL,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC;EACtC;EAGAC,eAAeA,CAAA;IACb,OAAO,CAAC,CAAC,IAAI,CAACF,QAAQ,EAAE;EAC1B;EAAC,QAAAG,CAAA,G;qBAjCUtB,YAAY,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZ3B,YAAY;IAAA4B,OAAA,EAAZ5B,YAAY,CAAA6B,IAAA;IAAAC,UAAA,EAFX;EAAM;;SAEP9B,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}