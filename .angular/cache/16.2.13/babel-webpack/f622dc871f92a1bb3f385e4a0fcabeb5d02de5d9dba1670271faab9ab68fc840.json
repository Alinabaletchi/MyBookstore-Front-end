{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass RegisterService {\n  constructor(httpReq) {\n    this.httpReq = httpReq;\n    this.apiUrl = 'http://localhost:8080/register';\n  }\n  registerUser(user) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.httpReq.post(this.apiUrl, user, httpOptions).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    console.error('An error occurred:', error);\n    return throwError(error.message || 'Server error');\n  }\n  static #_ = this.ɵfac = function RegisterService_Factory(t) {\n    return new (t || RegisterService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RegisterService,\n    factory: RegisterService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { RegisterService };","map":{"version":3,"names":["HttpHeaders","catchError","throwError","RegisterService","constructor","httpReq","apiUrl","registerUser","user","httpOptions","headers","post","pipe","handleError","error","console","message","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Alina\\Desktop\\library\\src\\app\\services\\register\\register.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterService {\n \n  private apiUrl = 'http://localhost:8080/register';\n\n  constructor(private httpReq: HttpClient) {\n  }\n\n  registerUser(user: any): Observable<string> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.httpReq.post<string>(this.apiUrl, user, httpOptions)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n \n  private handleError(error: any): Observable<string> {\n    console.error('An error occurred:', error);\n    return throwError(error.message || 'Server error');\n  }\n\n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAEzD,MAGaC,eAAe;EAI1BC,YAAoBC,OAAmB;IAAnB,KAAAA,OAAO,GAAPA,OAAO;IAFnB,KAAAC,MAAM,GAAG,gCAAgC;EAGjD;EAEAC,YAAYA,CAACC,IAAS;IACpB,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIV,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;IACD,OAAO,IAAI,CAACK,OAAO,CAACM,IAAI,CAAS,IAAI,CAACL,MAAM,EAAEE,IAAI,EAAEC,WAAW,CAAC,CAC7DG,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAWA,CAACC,KAAU;IAC5BC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,OAAOZ,UAAU,CAACY,KAAK,CAACE,OAAO,IAAI,cAAc,CAAC;EACpD;EAAC,QAAAC,CAAA,G;qBAtBUd,eAAe,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfnB,eAAe;IAAAoB,OAAA,EAAfpB,eAAe,CAAAqB,IAAA;IAAAC,UAAA,EAFd;EAAM;;SAEPtB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}